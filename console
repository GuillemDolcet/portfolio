#!/usr/bin/env php
<?php

// Get script args
$arguments = array_map('trim', array_filter(array_slice($argv, 1), 'strlen'));

// If no arg is supplied default to artisan console
if (count($arguments) === 0) {
    $arguments = ['tinker'];
}

// By default we relay to the artisan script with the exception of certain
// "keywords" which invoke docker-compose, or composer.
$command = 'php artisan';
switch ($arguments[0]) {
    case 'up':
    case 'down':
    case 'restart':
    case 'start':
    case 'stop':
        $command = 'docker compose';
        break;

    case 'install':
    case 'update':
    case 'require':
        $command = 'composer';
        break;

    case 'test':
        $command = './vendor/bin/phpunit';
        break;

    case 'into':
    case 'access':
    case 'login':
        $command = 'docker compose';
        $arguments[0] = 'exec';
        $arguments[] = '/bin/bash';
        break;

    case 'run':
        $command = 'docker compose';
        $arguments[0] = 'exec';
        break;
}

// Check if the application docker container is actually running. If it is,
// proxy the command through "docker-compose exec"
if ($command !== 'docker compose') {
    $docker = shell_exec('docker ps | grep app');
    if (!is_null($docker) && $docker !== '') {
        $command = "docker compose exec app {$command}";
    }
}

$cmd = explode(' ', $command);

$args = array_merge(array_slice($cmd, 1), $arguments);

$cmd = $cmd[0];

$path = shell_exec("which {$cmd}");
if (!is_null($path) && $path !== '') {
    $cmd = trim($path);
}

echo $cmd . ' ' . implode(' ', $args) . "\n";
pcntl_exec($cmd, $args);
